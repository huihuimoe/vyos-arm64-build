name: VyOS arm64 build

on:
  schedule:
    - cron: "0 1 * * 5"

  workflow_dispatch:
    inputs:
      BUILD_BY:
        description: 'Builder identifier (default: github@huihui.contact)'
        default: ''
      build_version:
        description: 'Version number (default: 1.5-rolling-ISO8601-TIMESTAMP)'
        default: ''

env:
  BUILD_BY: github@huihui.contact
  DEBIAN_MIRROR: http://deb.debian.org/debian/
  DEBIAN_SECURITY_MIRROR: http://deb.debian.org/debian-security
  # no package on the official repo
  VYOS_MIRROR: https://packages.vyos.net/repositories/current/
  # this repo doesn't seem to be updated anymore
  # https://dev.packages.vyos.net/?dir=repositories/current/dists/current
  # VYOS_MIRROR: https://rolling-packages.vyos.net/current/

jobs:
  build_generic_iso:
    runs-on: ubuntu-24.04-arm
    # if: github.repository == 'huihuimoe/vyos-arm64-build'
    permissions:
      contents: write
    container:
      image: vyos/vyos-build:current-arm64
      options: --sysctl net.ipv6.conf.lo.disable_ipv6=0 --privileged --user root
    defaults:
      run:
        shell: bash
    outputs:
      BUILD_BY: ${{ steps.set_env_variables.outputs.BUILD_BY }}
      build_version: ${{ steps.set_env_variables.outputs.build_version }}
      TIMESTAMP: ${{ steps.set_env_variables.outputs.TIMESTAMP }}
      PREVIOUS_SUCCESS_BUILD_TIMESTAMP: ${{ steps.set_env_variables.outputs.PREVIOUS_SUCCESS_BUILD_TIMESTAMP }}
      generic_image_iso: ${{ steps.build_generic_iso.outputs.generic_image_iso }}
      generic_image_name: ${{ steps.build_generic_iso.outputs.generic_image_name }}

    steps:
      - name: Install Dependencies
        run: |
          source <(sed -n '/enable programmable completion/,$p' /etc/skel/.bashrc)
          set -ex
          echo "HOME: $HOME"
          echo "PATH: $PATH"
          command -v go
          command -v ocamlfind
          # Install missing packages
          apt-get update -qq
          apt-get install -y \
            git-lfs libglib2.0-dev libip4tc-dev libipset-dev libnfnetlink-dev bubblewrap \
            libnftnl-dev libnl-nf-3-dev libpopt-dev libsystemd-dev perl-xs-dev \
            kpartx clang llvm libpcap-dev xz-utils python-is-python3 libbpf-dev linux-libc-dev

      - uses: actions/checkout@v4
        with:
          lfs: true
      - name: "Initialization: set env variables"
        id: set_env_variables
        run: |
          source <(sed -n '/enable programmable completion/,$p' /etc/skel/.bashrc)
          set -ex
          if [ -n "${{ github.event.inputs.BUILD_BY }}" ]; then
            echo "BUILD_BY=${{ github.event.inputs.BUILD_BY }}" >> $GITHUB_ENV
          fi
          if [ -z "${{ github.event.inputs.build_version }}" ]; then
            echo "build_version=1.5-rolling-$(date -u +%Y%m%d%H%M)" >> $GITHUB_OUTPUT
          else
            echo "build_version=${{ github.event.inputs.build_version }}" >> $GITHUB_OUTPUT
          fi
          echo "TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
          echo "PREVIOUS_SUCCESS_BUILD_TIMESTAMP=$(cat version.json | jq -r '.[0].timestamp')" >> $GITHUB_OUTPUT
          echo "BUILD_BY=$BUILD_BY" >> $GITHUB_OUTPUT

      - name: Build global deps
        run: |
          source <(sed -n '/enable programmable completion/,$p' /etc/skel/.bashrc)
          set -ex
          eval $(opam env --root=/opt/opam --set-root)
          mkdir global_deps
          cd global_deps
          global_deps=(
            libvyosconfig
            vyatta-bash
            vyatta-biosdevname
            vyatta-cfg
            # https://github.com/vyos/vyos-1x/commit/d6a82c134bed0b0921595928b7ec600b2935327b
            # vyatta-wanloadbalance
            vyos-utils
            # Architecture:all, can install directly
            # vyos-user-utils
            vyos-http-api-tools
            # Architecture:all, can install directly
            # vyos-cloud-init
            ipaddrcheck
            udp-broadcast-relay
            libnss-mapuser
            hvinfo
            # Architecture:all, can install directly
            # live-boot
          )
          for global_dep in ${global_deps[@]}; do
            git clone https://github.com/vyos/$global_dep
            cd $global_dep

            echo "y" | mk-build-deps --install --remove

            # should update libvyosconfig due to hardcode on vyos-1x
            # https://github.com/vyos/vyos-1x/blob/e90a2781f9eae555097e078b9b11dd0dca6c0acd/python/vyos/configtree.py#L22
            # that will failed on reftree.cache
            # 2025.03.05: fixed on https://github.com/vyos/vyos-1x/commit/731195c7adb21208767199f5487dfdf29ce09380
            # if [ "${global_dep}" = "libvyosconfig" ]; then
            #   ./build.sh
            #   cp _build/libvyosconfig.so /usr/lib/libvyosconfig.so.0
            # fi

            dpkg-buildpackage -b -us -uc -tc
            cd ..
          done

      - name: Checkout vyos-build repo
        uses: actions/checkout@v4
        with:
          repository: vyos/vyos-build
          path: vyos-build

      - name: Fix vyos-build
        env:
          MOK_KEY: ${{ secrets.MOK_KEY }}
          MINISIGN_PRIVATE_KEY: ${{ secrets.MINISIGN_PRIVATE_KEY }}
        run: |
          [ -n "$MOK_KEY" ] && echo "$MOK_KEY" > data/mok/MOK.key
          [ -n "$MINISIGN_PRIVATE_KEY" ] && echo "$MINISIGN_PRIVATE_KEY" > data/huihuimoe-vyos-arm64.minisign.key

          source <(sed -n '/enable programmable completion/,$p' /etc/skel/.bashrc)
          set -ex

          ### vyos-1x
          git clone --recursive https://github.com/vyos/vyos-1x \
            -b current --single-branch vyos-build/scripts/package-build/vyos-1x/vyos-1x
          # fixing unknown internal blob file
          # i don't know what is this file and why it's not in the repo
          # without this file, the build will failed
          # https://github.com/vyos/vyos-1x/commit/bab186b493145ee42453196e8ef4670afc71f6f1
          # https://github.com/vyos/vyos-1x/commit/dd5f9c19550c1f8ccb5e93bab0b604f9f9e1383e
          cp data/reftree.cache vyos-build/scripts/package-build/vyos-1x/vyos-1x/data/reftree.cache
          # apply patches
          patch -p1 -d vyos-build/scripts/package-build/vyos-1x/vyos-1x < data/vyos-1x-001-system_console.patch
          patch -p1 -d vyos-build/scripts/package-build/vyos-1x/vyos-1x < data/vyos-1x-002-boot_console.patch
          patch -p1 -d vyos-build/scripts/package-build/vyos-1x/vyos-1x < data/vyos-1x-003-increase_vyshim_init_timeout.patch
          patch -p1 -d vyos-build/scripts/package-build/vyos-1x/vyos-1x < data/vyos-1x-004-enable_telegraf_support.patch
          # Error: OCI runtime error: crun: cannot set memory+swap limit less than the memory limit
          patch -p1 -d vyos-build/scripts/package-build/vyos-1x/vyos-1x < data/vyos-1x-005-fix_podman_service.patch

          ### vyos-build
          # add default and dhcpv4 configuration
          cp data/config.boot.default vyos-build/data/live-build-config/includes.chroot/opt/vyatta/etc/
          cp data/config.boot.dhcp vyos-build/data/live-build-config/includes.chroot/opt/vyatta/etc/
          # fix kernel config
          patch -p1 -d vyos-build < data/vyos-build-001-kernel_config.patch
          patch -p1 -d vyos-build < data/vyos-build-002-mksquashfs_universal.patch
          patch -p1 -d vyos-build < data/vyos-build-003-fix_hardcoded_x86_64.patch
          patch -p1 -d vyos-build < data/vyos-build-004-fix_saltproject_package_url.patch
          patch -p1 -d vyos-build < data/vyos-build-005-add_vim_link.patch
          patch -p1 -d vyos-build < data/vyos-build-006-fix_kernel_sign.patch
          # sign kernel module but donot sign vmlinuz
          patch -p1 -d vyos-build < data/vyos-build-007-no_sbsign.patch
          patch -p1 -d vyos-build < data/vyos-build-008-fix_live_boot_initramfs_link.patch
          patch -p1 -d vyos-build < data/vyos-build-009-live_boot_serial_console_device.patch
          # https://github.com/vyos/vyos-build/blob/fd737172f1068870fe1ededbe9b2ed4a86663acd/data/live-build-config/includes.chroot/var/lib/shim-signed/mok/README.md
          if [ -f data/mok/MOK.key ]; then
            cp data/mok/MOK.{key,pem} vyos-build/data/live-build-config/includes.chroot/var/lib/shim-signed/mok/
          fi
          # add minisign pubkey
          cp data/huihuimoe-vyos-arm64.minisign.pub vyos-build/data/live-build-config/includes.chroot/usr/share/vyos/keys/

          true

      - name: Build Image Packages
        run: |
          cd vyos-build/scripts/package-build
          source <(sed -n '/enable programmable completion/,$p' /etc/skel/.bashrc)
          set -ex
          packages=$(ls .)
          ignore_packages=(amazon-cloudwatch-agent amazon-ssm-agent xen-guest-agent)
          for package in $packages; do
            [ ! -d $package ] && continue
            [[ " ${ignore_packages[@]} " =~ " ${package} " ]] && continue
            cd $package

            [ $package == "keepalived" ] && apt-get install -y libsnmp-dev

            ./build.py

            [ $package == "keepalived" ] && apt-get remove -y libsnmp-dev

            # clean
            df -Th
            apt-get autoremove -y
            rm -rf $package *.gz *.xz $HOME/.cache/go-build $HOME/go/pkg/mod $HOME/.rustup
            df -Th
            cd ..
          done

      - name: Pick Packages
        run: |
          cd vyos-build
          source <(sed -n '/enable programmable completion/,$p' /etc/skel/.bashrc)
          deb_files=$(find scripts/package-build -name "*.deb" -type f | \
            grep -v -- -dbg | \
            grep -v -- -dev | \
            grep -v -- -doc
          )
          ignore_packages=(
            charon-cmd
            dropbear-initramfs
            dropbear-run
            eapoltest
            frr-test-tools
            isc-dhcp-client-ddns
            isc-dhcp-common
            isc-dhcp-keama
            isc-dhcp-server
            isc-dhcp-server-ldap
            libnetsnmptrapd40
            libsnmp-perl
            libtac2-bin
            libyang-modules
            libyang-tools
            # python3-nftables
            rtr-tools
            sflowovsd.deb
            snmptrapd
            strongswan-nm
            strongswan-pki
            tkmib
            waagent
            wide-dhcpv6-relay
            wide-dhcpv6-server
            vpp-plugin-devtools
          )
          for deb_file in $deb_files; do
            if [[ " ${ignore_packages[@]} " =~ " $(basename $deb_file | cut -d_ -f1) " ]]; then
              echo "ignore $deb_file"
              continue
            fi
            cp $deb_file packages
          done
          global_deb_files=$(find ../global_deps -name "*.deb" -type f | \
            grep -v -- -dbg | \
            grep -v -- -dev | \
            grep -v -- -doc
          )
          for deb_file in $global_deb_files; do
            cp $deb_file packages
          done
          # vpp addition files
          find scripts/package-build/vpp -name "libvppinfra-dev*.deb" -type f -exec cp {} packages ';'
          find scripts/package-build/vpp -name "vpp-dev*.deb" -type f -exec cp {} packages ';'

          rm -rf packages/linux-headers-*
          ls -alh packages

      - name: Build generic ISO image
        id: build_generic_iso
        run: |
          cd vyos-build
          source <(sed -n '/enable programmable completion/,$p' /etc/skel/.bashrc)
          set -ex

          # setup db directory for vnstat
          echo '[[includes_chroot]]' >> data/build-flavors/generic.toml
          echo 'path = "etc/vnstat.conf"' >> data/build-flavors/generic.toml
          echo "data = 'DatabaseDir \"/opt/vyatta/etc/config/user-data/vnstat\"'" >> data/build-flavors/generic.toml
          echo '[[includes_chroot]]' >> data/build-flavors/generic.toml
          echo 'path = "etc/systemd/system/vnstat.service.d/override.conf"' >> data/build-flavors/generic.toml
          echo "data = '''" >> data/build-flavors/generic.toml
          echo "[Unit]" >> data/build-flavors/generic.toml
          echo "After=local-fs.target" >> data/build-flavors/generic.toml
          echo "[Service]" >> data/build-flavors/generic.toml
          echo "ExecStartPre=+mkdir -p /opt/vyatta/etc/config/user-data/vnstat" >> data/build-flavors/generic.toml
          echo "ExecStartPre=+chown 104:112 /opt/vyatta/etc/config/user-data/vnstat" >> data/build-flavors/generic.toml
          echo "StateDirectory=" >> data/build-flavors/generic.toml
          echo "ProtectSystem=off" >> data/build-flavors/generic.toml
          echo "'''" >> data/build-flavors/generic.toml

          ./build-vyos-image \
            --architecture arm64 \
            --build-by $BUILD_BY \
            --build-type release \
            --debian-mirror $DEBIAN_MIRROR \
            --debian-security-mirror $DEBIAN_SECURITY_MIRROR \
            --version ${{ steps.set_env_variables.outputs.build_version }} \
            --vyos-mirror $VYOS_MIRROR \
            --custom-package vim-tiny \
            --custom-package vnstat \
            --custom-package neofetch \
            --custom-package tree \
            --custom-package btop \
            --custom-package ripgrep \
            --custom-package wget \
            --custom-package ncdu \
            --custom-package fastnetmon \
            --custom-package containernetworking-plugins \
            --custom-package qemu-guest-agent \
            --custom-package mokutil \
            --custom-package sbsigntool \
            --custom-package grub-efi-arm64-signed \
            --custom-package shim-signed \
            generic
            # --custom-package cloud-init
          cd build
          # Determine image name and iso file
          GENERIC_IMAGE_NAME=$(jq --raw-output .artifacts[0] manifest.json | sed -e 's/.iso//')
          GENERIC_IMAGE_ISO=$(jq --raw-output .artifacts[0] manifest.json)
          echo "generic_image_name=${GENERIC_IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "generic_image_iso=${GENERIC_IMAGE_ISO}" >> $GITHUB_OUTPUT
          # Cryptographically sign the image
          MINISIGN_PUBKEY_FILE=$GITHUB_WORKSPACE/data/huihuimoe-vyos-arm64.minisign.pub
          MINISIGN_SECKEY_FILE=$GITHUB_WORKSPACE/data/huihuimoe-vyos-arm64.minisign.key
          if [ -f "$MINISIGN_SECKEY_FILE" ]; then
            $GITHUB_WORKSPACE/bin/minisign -s $MINISIGN_SECKEY_FILE -Sm ${GENERIC_IMAGE_ISO}
            $GITHUB_WORKSPACE/bin/minisign -Vm ${GENERIC_IMAGE_ISO} -x ${GENERIC_IMAGE_ISO}.minisig -p $MINISIGN_PUBKEY_FILE
          else
            # create a empty file to indicate failure
            touch ${GENERIC_IMAGE_ISO}.minisig
          fi
          # Move artifacts to workspace to avoid nested path in artifact archive
          mv manifest.json ${GENERIC_IMAGE_ISO} ${GENERIC_IMAGE_ISO}.minisig $GITHUB_WORKSPACE

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_generic_iso.outputs.generic_image_name }}
          path: |
            manifest.json
            ${{ steps.build_generic_iso.outputs.generic_image_iso }}
            ${{ steps.build_generic_iso.outputs.generic_image_iso }}.minisig
          retention-days: 15
          if-no-files-found: error

  publish:
    needs:
      - build_generic_iso
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    if: github.ref_name == 'master'
    steps:
      - uses: actions/checkout@v4
      - name: Clone vyos-build repo
        uses: actions/checkout@v4
        with:
          repository: vyos/vyos-build
          path: vyos-build
      - name: Clone vyos-1x source code
        uses: actions/checkout@v4
        with:
          repository: vyos/vyos-1x
          path: vyos-1x
      -  id: commit_ids
         shell: bash
         run: |
          cd vyos-build
          CHANGELOG_COMMIT_VYOS_BUILD=$(git log --since "${{ needs.build_generic_iso.outputs.PREVIOUS_SUCCESS_BUILD_TIMESTAMP }}" --format="%H" --reverse | head -n1)
          echo "CHANGELOG_COMMIT_VYOS_BUILD=${CHANGELOG_COMMIT_VYOS_BUILD:-HEAD}" >> $GITHUB_OUTPUT
          cd ../vyos-1x
          CHANGELOG_COMMIT_VYOS_1X=$(git log --since "${{ needs.build_generic_iso.outputs.PREVIOUS_SUCCESS_BUILD_TIMESTAMP }}" --format="%H" --reverse | head -n1)
          echo "CHANGELOG_COMMIT_VYOS_1X=${CHANGELOG_COMMIT_VYOS_1X:-HEAD}" >> $GITHUB_OUTPUT

      - name: "Release publishing: generate changelog for vyos-1x"
        id: generate_changelog_for_vyos-1x
        uses: mikepenz/release-changelog-builder-action@v5.2.0
        with:
          owner: "vyos"
          repo: "vyos-1x"
          fetchReviewers: false
          fromTag: ${{ steps.commit_ids.outputs.CHANGELOG_COMMIT_VYOS_1X }}
          toTag: HEAD
          configurationJson: |
            {
              "categories": [{"title": "", "labels": []}],
              "template": "#{{CHANGELOG}}",
              "pr_template": "- #{{TITLE}}\n   - PR: vyos/vyos-1x##{{NUMBER}}"
            }

      - name: "Release publishing: generate changelog for vyos-build"
        id: generate_changelog_for_vyos-build
        uses: mikepenz/release-changelog-builder-action@v5.2.0
        with:
          owner: "vyos"
          repo: "vyos-build"
          fetchReviewers: false
          fromTag: ${{ steps.commit_ids.outputs.CHANGELOG_COMMIT_VYOS_BUILD }}
          toTag: HEAD
          configurationJson: |
            {
              "categories": [{"title": "", "labels": []}],
              "template": "#{{CHANGELOG}}",
              "pr_template": "- #{{TITLE}}\n   - PR: vyos/vyos-build##{{NUMBER}}"
            }

      - name: "Release publishing: generate CHANGELOG.md"
        run: |
          cat <<EOF > CHANGELOG.md
          ## vyos-1x
          ${{ steps.generate_changelog_for_vyos-1x.outputs.changelog }}
          ## vyos-build
          ${{ steps.generate_changelog_for_vyos-build.outputs.changelog }}
          EOF
          cat CHANGELOG.md

      - name: "Release publishing: create version.json"
        uses: jsdaniell/create-json@v1.2.3
        with:
          name: "version.json"
          json: |
            [
              {
                "url": "https://github.com/huihuimoe/vyos-arm64-build/releases/download/${{ needs.build_generic_iso.outputs.build_version }}/${{ needs.build_generic_iso.outputs.generic_image_iso }}",
                "version": "${{ needs.build_generic_iso.outputs.build_version }}",
                "timestamp": "${{ needs.build_generic_iso.outputs.TIMESTAMP }}"
              }
            ]

      - name: "Release publishing: check if the repository was modified during runtime to prevent autocommit failure"
        id: check_if_the_repository_was_modified_during_runtime
        run: |
          sudo chown -R $(whoami):$(whoami) ./*
          git pull --autostash --rebase

      - name: "Release publishing: create autocommit and tag"
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          tagging_message: ${{ needs.build_generic_iso.outputs.build_version }}
          commit_message: ${{ needs.build_generic_iso.outputs.build_version }}
          commit_author: "github-actions <${{ needs.build_generic_iso.outputs.BUILD_BY }}>"

      - uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build_generic_iso.outputs.generic_image_name }}

      - name: "Release publishing: publish release"
        uses: softprops/action-gh-release@v2
        with:
          body_path: CHANGELOG.md
          tag_name: ${{ needs.build_generic_iso.outputs.build_version }}
          fail_on_unmatched_files: true
          files: |
            ${{ needs.build_generic_iso.outputs.generic_image_iso }}
            ${{ needs.build_generic_iso.outputs.generic_image_iso }}.minisig

      - uses: Nats-ji/delete-old-releases@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep-count: 10
          keep-old-minor-releases: false
